[
  // {
  //   "key": "space",
  //   "command": "vspacecode.space",
  //   "when": "editorTextFocus && neovim.mode == normal"
  // },
  // {
  //   "key": ",",
  //   "command": "vscode-neovim.send",
  //   "when": "editorTextFocus && neovim.mode == normal",
  //   "args": "<,>"
  // },
  {
		"key": "cmd+e",
		"command": "workbench.files.action.focusFilesExplorer",
	},
  {
		"key": "ctrl+j",
		"command": "workbench.action.navigateDown",
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.navigateUp",
	},
  {
		"key": "ctrl+h",
		"command": "workbench.action.navigateLeft",
	},
	{
		"key": "ctrl+l",
		"command": "workbench.action.navigateRight",
	},
  {
      "key": "alt+-",
      "command": "type",
      "when": "(editorLangId == r || editorLangId == rmd && editorTextFocus)",
      "args": { "text": " <- " }
  },
  {
      "key": "cmd+shift+m",
      "command": "type",
      "when": "editorLangId == r || editorLangId == rmd && editorTextFocus",
      "args": { "text": " |> " }
  },
  {
      "key": "ctrl+shift+m",
      "command": "-workbench.actions.view.problems"
  },
{
  "key": "cmd+alt+m",
  "command": "r.runCommandWithEditorPath",
  "args": "tdcstyle::style()"
},
// Trigger vspacecode in empty editor group
{
  "key": "space",
  "command": "vspacecode.space",
  "when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
},
// Trigger vspacecode when sidebar is in focus
{
  "key": "space",
  "command": "vspacecode.space",
  "when": "sideBarFocus && !inputFocus && !whichkeyActive"
},
// Keybindings required for edamagit
// https://github.com/kahole/edamagit#vim-support-vscodevim
// Cannot be added to package.json because keybinding replacements
{
  "key": "tab",
  "command": "extension.vim_tab",
  "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
},
{
  "key": "tab",
  "command": "-extension.vim_tab",
  "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
},
{
  "key": "x",
  "command": "magit.discard-at-point",
  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
  "key": "k",
  "command": "-magit.discard-at-point"
},
{
  "key": "-",
  "command": "magit.reverse-at-point",
  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
  "key": "v",
  "command": "-magit.reverse-at-point"
},
{
  "key": "shift+-",
  "command": "magit.reverting",
  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
  "key": "shift+v",
  "command": "-magit.reverting"
},
{
  "key": "shift+o",
  "command": "magit.resetting",
  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
  "key": "shift+x",
  "command": "-magit.resetting"
},
{
  "key": "x",
  "command": "-magit.reset-mixed"
},
{
  "key": "ctrl+u x",
  "command": "-magit.reset-hard"
},
// Extra ref menu support for edamagit with the key "y"
// Cannot be added to package.json because keybinding replacements
{
  "key": "y",
  "command": "-magit.show-refs"
},
{
  "key": "y",
  "command": "vspacecode.showMagitRefMenu",
  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
},
// Easy navigation in quick open/QuickPick
{
  "key": "ctrl+j",
  "command": "workbench.action.quickOpenSelectNext",
  "when": "inQuickOpen"
},
{
  "key": "ctrl+k",
  "command": "workbench.action.quickOpenSelectPrevious",
  "when": "inQuickOpen"
},
// Easy navigation in suggestion/intellisense
// Cannot be added to package.json because of conflict with vim's default bindings
{
  "key": "ctrl+j",
  "command": "selectNextSuggestion",
  "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
{
  "key": "ctrl+k",
  "command": "selectPrevSuggestion",
  "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
{
  "key": "ctrl+l",
  "command": "acceptSelectedSuggestion",
  "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
// Easy navigation in parameter hint (i.e. traverse the hints when there's multiple overload for one method)
// Cannot be added to package.json because of conflict with vim's default bindings
{
  "key": "ctrl+j",
  "command": "showNextParameterHint",
  "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
},
{
  "key": "ctrl+k",
  "command": "showPrevParameterHint",
  "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
},
// Easy navigation in code action
{
  "key": "ctrl+j",
  "command": "selectNextCodeAction",
  "when": "codeActionMenuVisible"
},
{
  "key": "ctrl+k",
  "command": "selectPrevCodeAction",
  "when": "codeActionMenuVisible"
},
{
  "key": "ctrl+l",
  "command": "acceptSelectedCodeAction",
  "when": "codeActionMenuVisible"
},
// Add ctrl+h/l to navigate in file browser
{
  "key": "ctrl+h",
  "command": "file-browser.stepOut",
  "when": "inFileBrowser"
},
{
  "key": "ctrl+l",
  "command": "file-browser.stepIn",
  "when": "inFileBrowser"
},
{
  "key": "ctrl+shift+k",
  "command": "workbench.action.terminal.scrollUp",
  "when": "terminalProcessSupported"
},
{
  "key": "ctrl+alt+pageup",
  "command": "-workbench.action.terminal.scrollUp",
  "when": "terminalFocus && terminalProcessSupported"
},
{
  "key": "ctrl+shift+j",
  "command": "workbench.action.terminal.scrollDown",
  "when": "terminalProcessSupported"
},
{
  "key": "ctrl+alt+pagedown",
  "command": "-workbench.action.terminal.scrollDown",
  "when": "terminalFocus && terminalProcessSupported"
},
{
  "key": "ctrl+shift+k",
  "command": "-editor.action.deleteLines",
  "when": "textInputFocus && !editorReadonly"
},
]
